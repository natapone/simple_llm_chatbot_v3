# Simple LLM Chatbot v3 - Pre-Sales Assistant

## Project Overview
This project implements a pre-sales chatbot that leverages LangFlow, LiteLLM with OpenAI's GPT-4o-mini model, and Python to engage with potential clients, gather lead information, and provide consistent budget and timeline estimates using a database-driven approach rather than relying on the LLM to generate them.

## Project Structure
```
simple_llm_chatbot_v3/
├── brief/                  # Project brief and requirements
├── docs/                   # Documentation
│   ├── design/             # Design documents
│   ├── api/                # API documentation
│   └── test/               # Test documentation
├── src/                    # Source code
│   ├── backend/            # Python backend
│   │   ├── main.py         # Main application entry point (FastAPI)
│   │   ├── database.py     # Database models and operations
│   │   ├── tools.py        # Budget & Timeline Tool implementation
│   │   ├── api.py          # API endpoints
│   │   └── config.py       # Configuration settings
│   ├── langflow/           # LangFlow configuration
│   │   └── flows/          # LangFlow flow definitions
│   └── prompts/            # LLM prompts
├── tests/                  # Test files
│   ├── test_database.py    # Tests for database operations
│   ├── test_tools.py       # Tests for Budget & Timeline Tool
│   └── test_api.py         # Tests for API endpoints
├── run.py                  # Script to run the application
├── run_tests.py            # Script to run the tests
├── .env.example            # Example environment variables
├── requirements.txt        # Python dependencies
├── .gitignore              # Git ignore file
├── project_info.txt        # Project information and changelog
└── README.md               # Project overview
```

## Requirements
- Python 3.11
- LangFlow (installed and run locally)
- LiteLLM (using GPT-4o-mini model)
- FastAPI
- SQLite (for MVP)

## Coding Standards
1. **Naming Conventions**:
   - Use snake_case for variables, functions, and file names
   - Use PascalCase for class names
   - Use UPPER_CASE for constants

2. **Documentation**:
   - All functions must have docstrings with purpose, parameters, return values, and examples
   - All modules must have module-level docstrings

3. **Error Handling**:
   - Use try-except blocks for error handling
   - Log all errors with appropriate context

4. **Logging**:
   - Log function entry, exit, and key events
   - Use appropriate log levels (DEBUG, INFO, WARNING, ERROR, CRITICAL)

5. **Testing**:
   - Write unit tests for all functions
   - Aim for high test coverage

## Changelog
- [2025-03-06] Project initialized
- [2025-03-06] Created project structure
- [2025-03-06] Created design documents:
  - Implementation design
  - Budget & Timeline Tool specification
  - LangFlow configuration specification
  - Python backend specification
  - Implementation plan
- [2025-03-06] Created API documentation
- [2025-03-06] Created test documentation
- [2025-03-06] Created system prompt for LLM
- [2025-03-06] Updated design to use FastAPI, Python 3.11, and LiteLLM with GPT-4o-mini model
- [2025-03-06] Updated implementation plan to use steps instead of days
- [2025-03-06] Updated documentation to specify LangFlow will be installed and run locally
- [2025-03-06] Added .gitignore file
- [2025-03-06] Created database design document
- [2025-03-06] Implemented database.py with SQLAlchemy models and utility functions
- [2025-03-06] Implemented tools.py with Budget & Timeline Tool and fuzzy matching
- [2025-03-06] Implemented config.py for application configuration
- [2025-03-06] Implemented api.py with API endpoints
- [2025-03-06] Implemented main.py with FastAPI application
- [2025-03-06] Created LangFlow flow definition for the pre-sales chatbot
- [2025-03-06] Created test files for database, tools, and API
- [2025-03-06] Created run.py and run_tests.py scripts
- [2025-03-06] Replaced fuzzy matching with LiteLLM for project type extraction
- [2025-03-06] Updated implementation plan to reflect the use of LiteLLM for project type extraction
- [2025-03-06] Updated tests to test LiteLLM project type extraction instead of fuzzy matching
- [2025-03-06] Updated SQLAlchemy imports to use modern approach
- [2025-03-06] Replaced FastAPI on_event handlers with lifespan context manager
- [2025-03-06] Removed unused FUZZY_MATCH_THRESHOLD configuration
- [2025-03-06] Created run_langflow.py script to run LangFlow locally
- [2025-03-06] Created test_langflow.py to test LangFlow integration
- [2025-03-06] Created LangFlow setup and usage documentation
- [2025-03-06] Improved LangFlow flow with modern components (ChatInput, Memory, Prompt, LLMModel, Tool, ChatOutput)
- [2025-03-06] Updated LangFlow documentation to explain the new flow structure
- [2025-03-06] Implemented web interface for LangFlow Memory Chatbot
- [2025-03-06] Created run_web_chatbot.py script to run both backend API and web interface
- [2025-03-06] Updated documentation with web interface setup and usage instructions
- [2025-03-06] Implemented memory-enabled chatbot using LangChain's ConversationBufferMemory
- [2025-03-06] Updated to use modern LangChain RunnableSequence approach for the chatbot
- [2025-03-06] Added Markdown rendering support to the web interface for rich formatted responses
- [2025-03-06] Updated documentation with details about Markdown rendering capabilities
- [2025-03-06] Enhanced web interface with responsive design, dark mode support, loading states, and improved error handling
- [2025-03-06] Updated documentation with details about the new design features and improvements
- [2025-03-06] Implemented LangChain tool wrappers for Budget & Timeline Tool and Store Lead Tool
- [2025-03-06] Created custom LangFlow tool components for direct integration with LangFlow UI
- [2025-03-06] Updated LangFlow flow definition to use custom tool components
- [2025-03-06] Updated documentation with details about custom tool implementation and usage
- [2025-03-06] Created dedicated web interface for Presales Chatbot with automatic tool integration
- [2025-03-06] Implemented lead information extraction from conversation context
- [2025-03-06] Added run_presales_chatbot.py script to run both backend API and presales web interface
- [2025-03-06] Updated documentation with details about the presales chatbot web interface
- [2025-03-06] Cleaned up project by removing unused files, Python cache directories, and temporary files
- [2025-03-06] Updated documentation to include detailed information about all run scripts and their usage
- [2025-03-06] Added comprehensive development journey documentation to chronicle the project's evolution, challenges, and solutions 